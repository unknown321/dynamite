// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DYNAMITESYNCSCHEMA_DYNAMITEMESSAGE_H_
#define FLATBUFFERS_GENERATED_DYNAMITESYNCSCHEMA_DYNAMITEMESSAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

namespace DynamiteMessage {

struct Vec3;

struct Ping;
struct PingBuilder;

struct AddFixedUserMarker;
struct AddFixedUserMarkerBuilder;

struct AddFollowUserMarker;
struct AddFollowUserMarkerBuilder;

struct RemoveUserMarker;
struct RemoveUserMarkerBuilder;

struct SetSightMarker;
struct SetSightMarkerBuilder;

struct RequestVar;
struct RequestVarBuilder;

struct Bool;
struct BoolBuilder;

struct Int32;
struct Int32Builder;

struct Uint32;
struct Uint32Builder;

struct Float;
struct FloatBuilder;

struct Int8;
struct Int8Builder;

struct Uint8;
struct Uint8Builder;

struct Int16;
struct Int16Builder;

struct Uint16;
struct Uint16Builder;

struct SyncVar;
struct SyncVarBuilder;

struct MessageWrapper;
struct MessageWrapperBuilder;

enum Message : uint8_t {
  Message_NONE = 0,
  Message_Ping = 1,
  Message_AddFixedUserMarker = 2,
  Message_AddFollowUserMarker = 3,
  Message_RemoveUserMarker = 4,
  Message_SetSightMarker = 5,
  Message_SyncVar = 6,
  Message_RequestVar = 7,
  Message_MIN = Message_NONE,
  Message_MAX = Message_RequestVar
};

inline const Message (&EnumValuesMessage())[8] {
  static const Message values[] = {
    Message_NONE,
    Message_Ping,
    Message_AddFixedUserMarker,
    Message_AddFollowUserMarker,
    Message_RemoveUserMarker,
    Message_SetSightMarker,
    Message_SyncVar,
    Message_RequestVar
  };
  return values;
}

inline const char * const *EnumNamesMessage() {
  static const char * const names[9] = {
    "NONE",
    "Ping",
    "AddFixedUserMarker",
    "AddFollowUserMarker",
    "RemoveUserMarker",
    "SetSightMarker",
    "SyncVar",
    "RequestVar",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessage(Message e) {
  if (::flatbuffers::IsOutRange(e, Message_NONE, Message_RequestVar)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessage()[index];
}

template<typename T> struct MessageTraits {
  static const Message enum_value = Message_NONE;
};

template<> struct MessageTraits<DynamiteMessage::Ping> {
  static const Message enum_value = Message_Ping;
};

template<> struct MessageTraits<DynamiteMessage::AddFixedUserMarker> {
  static const Message enum_value = Message_AddFixedUserMarker;
};

template<> struct MessageTraits<DynamiteMessage::AddFollowUserMarker> {
  static const Message enum_value = Message_AddFollowUserMarker;
};

template<> struct MessageTraits<DynamiteMessage::RemoveUserMarker> {
  static const Message enum_value = Message_RemoveUserMarker;
};

template<> struct MessageTraits<DynamiteMessage::SetSightMarker> {
  static const Message enum_value = Message_SetSightMarker;
};

template<> struct MessageTraits<DynamiteMessage::SyncVar> {
  static const Message enum_value = Message_SyncVar;
};

template<> struct MessageTraits<DynamiteMessage::RequestVar> {
  static const Message enum_value = Message_RequestVar;
};

bool VerifyMessage(::flatbuffers::Verifier &verifier, const void *obj, Message type);
bool VerifyMessageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

enum ArrayValues : uint8_t {
  ArrayValues_NONE = 0,
  ArrayValues_Bool = 1,
  ArrayValues_Int32 = 2,
  ArrayValues_Uint32 = 3,
  ArrayValues_Float = 4,
  ArrayValues_Int8 = 5,
  ArrayValues_Uint8 = 6,
  ArrayValues_Int16 = 7,
  ArrayValues_Uint16 = 8,
  ArrayValues_MIN = ArrayValues_NONE,
  ArrayValues_MAX = ArrayValues_Uint16
};

inline const ArrayValues (&EnumValuesArrayValues())[9] {
  static const ArrayValues values[] = {
    ArrayValues_NONE,
    ArrayValues_Bool,
    ArrayValues_Int32,
    ArrayValues_Uint32,
    ArrayValues_Float,
    ArrayValues_Int8,
    ArrayValues_Uint8,
    ArrayValues_Int16,
    ArrayValues_Uint16
  };
  return values;
}

inline const char * const *EnumNamesArrayValues() {
  static const char * const names[10] = {
    "NONE",
    "Bool",
    "Int32",
    "Uint32",
    "Float",
    "Int8",
    "Uint8",
    "Int16",
    "Uint16",
    nullptr
  };
  return names;
}

inline const char *EnumNameArrayValues(ArrayValues e) {
  if (::flatbuffers::IsOutRange(e, ArrayValues_NONE, ArrayValues_Uint16)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesArrayValues()[index];
}

template<typename T> struct ArrayValuesTraits {
  static const ArrayValues enum_value = ArrayValues_NONE;
};

template<> struct ArrayValuesTraits<DynamiteMessage::Bool> {
  static const ArrayValues enum_value = ArrayValues_Bool;
};

template<> struct ArrayValuesTraits<DynamiteMessage::Int32> {
  static const ArrayValues enum_value = ArrayValues_Int32;
};

template<> struct ArrayValuesTraits<DynamiteMessage::Uint32> {
  static const ArrayValues enum_value = ArrayValues_Uint32;
};

template<> struct ArrayValuesTraits<DynamiteMessage::Float> {
  static const ArrayValues enum_value = ArrayValues_Float;
};

template<> struct ArrayValuesTraits<DynamiteMessage::Int8> {
  static const ArrayValues enum_value = ArrayValues_Int8;
};

template<> struct ArrayValuesTraits<DynamiteMessage::Uint8> {
  static const ArrayValues enum_value = ArrayValues_Uint8;
};

template<> struct ArrayValuesTraits<DynamiteMessage::Int16> {
  static const ArrayValues enum_value = ArrayValues_Int16;
};

template<> struct ArrayValuesTraits<DynamiteMessage::Uint16> {
  static const ArrayValues enum_value = ArrayValues_Uint16;
};

bool VerifyArrayValues(::flatbuffers::Verifier &verifier, const void *obj, ArrayValues type);
bool VerifyArrayValuesVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct Ping FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NUMBER = 4
  };
  uint32_t number() const {
    return GetField<uint32_t>(VT_NUMBER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_NUMBER, 4) &&
           verifier.EndTable();
  }
};

struct PingBuilder {
  typedef Ping Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_number(uint32_t number) {
    fbb_.AddElement<uint32_t>(Ping::VT_NUMBER, number, 0);
  }
  explicit PingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Ping> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Ping>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Ping> CreatePing(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t number = 0) {
  PingBuilder builder_(_fbb);
  builder_.add_number(number);
  return builder_.Finish();
}

struct AddFixedUserMarker FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AddFixedUserMarkerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4
  };
  const DynamiteMessage::Vec3 *pos() const {
    return GetStruct<const DynamiteMessage::Vec3 *>(VT_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<DynamiteMessage::Vec3>(verifier, VT_POS, 4) &&
           verifier.EndTable();
  }
};

struct AddFixedUserMarkerBuilder {
  typedef AddFixedUserMarker Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(const DynamiteMessage::Vec3 *pos) {
    fbb_.AddStruct(AddFixedUserMarker::VT_POS, pos);
  }
  explicit AddFixedUserMarkerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AddFixedUserMarker> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AddFixedUserMarker>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AddFixedUserMarker> CreateAddFixedUserMarker(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const DynamiteMessage::Vec3 *pos = nullptr) {
  AddFixedUserMarkerBuilder builder_(_fbb);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct AddFollowUserMarker FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AddFollowUserMarkerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_OBJECT_ID = 6
  };
  const DynamiteMessage::Vec3 *pos() const {
    return GetStruct<const DynamiteMessage::Vec3 *>(VT_POS);
  }
  uint32_t object_id() const {
    return GetField<uint32_t>(VT_OBJECT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<DynamiteMessage::Vec3>(verifier, VT_POS, 4) &&
           VerifyField<uint32_t>(verifier, VT_OBJECT_ID, 4) &&
           verifier.EndTable();
  }
};

struct AddFollowUserMarkerBuilder {
  typedef AddFollowUserMarker Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(const DynamiteMessage::Vec3 *pos) {
    fbb_.AddStruct(AddFollowUserMarker::VT_POS, pos);
  }
  void add_object_id(uint32_t object_id) {
    fbb_.AddElement<uint32_t>(AddFollowUserMarker::VT_OBJECT_ID, object_id, 0);
  }
  explicit AddFollowUserMarkerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AddFollowUserMarker> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AddFollowUserMarker>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AddFollowUserMarker> CreateAddFollowUserMarker(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const DynamiteMessage::Vec3 *pos = nullptr,
    uint32_t object_id = 0) {
  AddFollowUserMarkerBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct RemoveUserMarker FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RemoveUserMarkerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MARKER_ID = 4
  };
  uint32_t marker_id() const {
    return GetField<uint32_t>(VT_MARKER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MARKER_ID, 4) &&
           verifier.EndTable();
  }
};

struct RemoveUserMarkerBuilder {
  typedef RemoveUserMarker Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_marker_id(uint32_t marker_id) {
    fbb_.AddElement<uint32_t>(RemoveUserMarker::VT_MARKER_ID, marker_id, 0);
  }
  explicit RemoveUserMarkerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RemoveUserMarker> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RemoveUserMarker>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RemoveUserMarker> CreateRemoveUserMarker(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t marker_id = 0) {
  RemoveUserMarkerBuilder builder_(_fbb);
  builder_.add_marker_id(marker_id);
  return builder_.Finish();
}

struct SetSightMarker FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SetSightMarkerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_DURATION = 6
  };
  uint32_t object_id() const {
    return GetField<uint32_t>(VT_OBJECT_ID, 0);
  }
  uint32_t duration() const {
    return GetField<uint32_t>(VT_DURATION, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_OBJECT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_DURATION, 4) &&
           verifier.EndTable();
  }
};

struct SetSightMarkerBuilder {
  typedef SetSightMarker Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_object_id(uint32_t object_id) {
    fbb_.AddElement<uint32_t>(SetSightMarker::VT_OBJECT_ID, object_id, 0);
  }
  void add_duration(uint32_t duration) {
    fbb_.AddElement<uint32_t>(SetSightMarker::VT_DURATION, duration, 0);
  }
  explicit SetSightMarkerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SetSightMarker> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SetSightMarker>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SetSightMarker> CreateSetSightMarker(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t object_id = 0,
    uint32_t duration = 0) {
  SetSightMarkerBuilder builder_(_fbb);
  builder_.add_duration(duration);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

struct RequestVar FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RequestVarBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CATEGORY = 4,
    VT_NAME = 6
  };
  const ::flatbuffers::String *category() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CATEGORY);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CATEGORY) &&
           verifier.VerifyString(category()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct RequestVarBuilder {
  typedef RequestVar Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_category(::flatbuffers::Offset<::flatbuffers::String> category) {
    fbb_.AddOffset(RequestVar::VT_CATEGORY, category);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(RequestVar::VT_NAME, name);
  }
  explicit RequestVarBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RequestVar> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RequestVar>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RequestVar> CreateRequestVar(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> category = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  RequestVarBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_category(category);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RequestVar> CreateRequestVarDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *category = nullptr,
    const char *name = nullptr) {
  auto category__ = category ? _fbb.CreateString(category) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return DynamiteMessage::CreateRequestVar(
      _fbb,
      category__,
      name__);
}

struct Bool FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BoolBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct BoolBuilder {
  typedef Bool Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(Bool::VT_VALUE, value);
  }
  explicit BoolBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Bool> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Bool>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Bool> CreateBool(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value = 0) {
  BoolBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Bool> CreateBoolDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return DynamiteMessage::CreateBool(
      _fbb,
      value__);
}

struct Int32 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int32Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int32_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Int32Builder {
  typedef Int32 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> value) {
    fbb_.AddOffset(Int32::VT_VALUE, value);
  }
  explicit Int32Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int32> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int32>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Int32> CreateInt32(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> value = 0) {
  Int32Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Int32> CreateInt32Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int32_t>(*value) : 0;
  return DynamiteMessage::CreateInt32(
      _fbb,
      value__);
}

struct Uint32 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Uint32Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint32_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Uint32Builder {
  typedef Uint32 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> value) {
    fbb_.AddOffset(Uint32::VT_VALUE, value);
  }
  explicit Uint32Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Uint32> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Uint32>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Uint32> CreateUint32(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> value = 0) {
  Uint32Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Uint32> CreateUint32Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint32_t>(*value) : 0;
  return DynamiteMessage::CreateUint32(
      _fbb,
      value__);
}

struct Float FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FloatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<float> *value() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct FloatBuilder {
  typedef Float Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<float>> value) {
    fbb_.AddOffset(Float::VT_VALUE, value);
  }
  explicit FloatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Float> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Float>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Float> CreateFloat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> value = 0) {
  FloatBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Float> CreateFloatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<float>(*value) : 0;
  return DynamiteMessage::CreateFloat(
      _fbb,
      value__);
}

struct Int8 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int8Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int8_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Int8Builder {
  typedef Int8 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> value) {
    fbb_.AddOffset(Int8::VT_VALUE, value);
  }
  explicit Int8Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int8> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int8>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Int8> CreateInt8(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> value = 0) {
  Int8Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Int8> CreateInt8Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int8_t>(*value) : 0;
  return DynamiteMessage::CreateInt8(
      _fbb,
      value__);
}

struct Uint8 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Uint8Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint8_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Uint8Builder {
  typedef Uint8 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value) {
    fbb_.AddOffset(Uint8::VT_VALUE, value);
  }
  explicit Uint8Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Uint8> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Uint8>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Uint8> CreateUint8(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> value = 0) {
  Uint8Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Uint8> CreateUint8Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint8_t>(*value) : 0;
  return DynamiteMessage::CreateUint8(
      _fbb,
      value__);
}

struct Int16 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Int16Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<int16_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<int16_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Int16Builder {
  typedef Int16 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> value) {
    fbb_.AddOffset(Int16::VT_VALUE, value);
  }
  explicit Int16Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Int16> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Int16>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Int16> CreateInt16(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int16_t>> value = 0) {
  Int16Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Int16> CreateInt16Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int16_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<int16_t>(*value) : 0;
  return DynamiteMessage::CreateInt16(
      _fbb,
      value__);
}

struct Uint16 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Uint16Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::Vector<uint16_t> *value() const {
    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyVector(value()) &&
           verifier.EndTable();
  }
};

struct Uint16Builder {
  typedef Uint16 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> value) {
    fbb_.AddOffset(Uint16::VT_VALUE, value);
  }
  explicit Uint16Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Uint16> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Uint16>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Uint16> CreateUint16(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> value = 0) {
  Uint16Builder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Uint16> CreateUint16Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *value = nullptr) {
  auto value__ = value ? _fbb.CreateVector<uint16_t>(*value) : 0;
  return DynamiteMessage::CreateUint16(
      _fbb,
      value__);
}

struct SyncVar FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SyncVarBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CATEGORY = 4,
    VT_NAME = 6,
    VT_ARRAY_SIZE = 8,
    VT_ARRAY_START = 10,
    VT_ARRAY_VALUES_TYPE = 12,
    VT_ARRAY_VALUES = 14
  };
  const ::flatbuffers::String *category() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CATEGORY);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  uint32_t array_size() const {
    return GetField<uint32_t>(VT_ARRAY_SIZE, 0);
  }
  uint32_t array_start() const {
    return GetField<uint32_t>(VT_ARRAY_START, 0);
  }
  DynamiteMessage::ArrayValues array_values_type() const {
    return static_cast<DynamiteMessage::ArrayValues>(GetField<uint8_t>(VT_ARRAY_VALUES_TYPE, 0));
  }
  const void *array_values() const {
    return GetPointer<const void *>(VT_ARRAY_VALUES);
  }
  template<typename T> const T *array_values_as() const;
  const DynamiteMessage::Bool *array_values_as_Bool() const {
    return array_values_type() == DynamiteMessage::ArrayValues_Bool ? static_cast<const DynamiteMessage::Bool *>(array_values()) : nullptr;
  }
  const DynamiteMessage::Int32 *array_values_as_Int32() const {
    return array_values_type() == DynamiteMessage::ArrayValues_Int32 ? static_cast<const DynamiteMessage::Int32 *>(array_values()) : nullptr;
  }
  const DynamiteMessage::Uint32 *array_values_as_Uint32() const {
    return array_values_type() == DynamiteMessage::ArrayValues_Uint32 ? static_cast<const DynamiteMessage::Uint32 *>(array_values()) : nullptr;
  }
  const DynamiteMessage::Float *array_values_as_Float() const {
    return array_values_type() == DynamiteMessage::ArrayValues_Float ? static_cast<const DynamiteMessage::Float *>(array_values()) : nullptr;
  }
  const DynamiteMessage::Int8 *array_values_as_Int8() const {
    return array_values_type() == DynamiteMessage::ArrayValues_Int8 ? static_cast<const DynamiteMessage::Int8 *>(array_values()) : nullptr;
  }
  const DynamiteMessage::Uint8 *array_values_as_Uint8() const {
    return array_values_type() == DynamiteMessage::ArrayValues_Uint8 ? static_cast<const DynamiteMessage::Uint8 *>(array_values()) : nullptr;
  }
  const DynamiteMessage::Int16 *array_values_as_Int16() const {
    return array_values_type() == DynamiteMessage::ArrayValues_Int16 ? static_cast<const DynamiteMessage::Int16 *>(array_values()) : nullptr;
  }
  const DynamiteMessage::Uint16 *array_values_as_Uint16() const {
    return array_values_type() == DynamiteMessage::ArrayValues_Uint16 ? static_cast<const DynamiteMessage::Uint16 *>(array_values()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CATEGORY) &&
           verifier.VerifyString(category()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_ARRAY_SIZE, 4) &&
           VerifyField<uint32_t>(verifier, VT_ARRAY_START, 4) &&
           VerifyField<uint8_t>(verifier, VT_ARRAY_VALUES_TYPE, 1) &&
           VerifyOffset(verifier, VT_ARRAY_VALUES) &&
           VerifyArrayValues(verifier, array_values(), array_values_type()) &&
           verifier.EndTable();
  }
};

template<> inline const DynamiteMessage::Bool *SyncVar::array_values_as<DynamiteMessage::Bool>() const {
  return array_values_as_Bool();
}

template<> inline const DynamiteMessage::Int32 *SyncVar::array_values_as<DynamiteMessage::Int32>() const {
  return array_values_as_Int32();
}

template<> inline const DynamiteMessage::Uint32 *SyncVar::array_values_as<DynamiteMessage::Uint32>() const {
  return array_values_as_Uint32();
}

template<> inline const DynamiteMessage::Float *SyncVar::array_values_as<DynamiteMessage::Float>() const {
  return array_values_as_Float();
}

template<> inline const DynamiteMessage::Int8 *SyncVar::array_values_as<DynamiteMessage::Int8>() const {
  return array_values_as_Int8();
}

template<> inline const DynamiteMessage::Uint8 *SyncVar::array_values_as<DynamiteMessage::Uint8>() const {
  return array_values_as_Uint8();
}

template<> inline const DynamiteMessage::Int16 *SyncVar::array_values_as<DynamiteMessage::Int16>() const {
  return array_values_as_Int16();
}

template<> inline const DynamiteMessage::Uint16 *SyncVar::array_values_as<DynamiteMessage::Uint16>() const {
  return array_values_as_Uint16();
}

struct SyncVarBuilder {
  typedef SyncVar Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_category(::flatbuffers::Offset<::flatbuffers::String> category) {
    fbb_.AddOffset(SyncVar::VT_CATEGORY, category);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(SyncVar::VT_NAME, name);
  }
  void add_array_size(uint32_t array_size) {
    fbb_.AddElement<uint32_t>(SyncVar::VT_ARRAY_SIZE, array_size, 0);
  }
  void add_array_start(uint32_t array_start) {
    fbb_.AddElement<uint32_t>(SyncVar::VT_ARRAY_START, array_start, 0);
  }
  void add_array_values_type(DynamiteMessage::ArrayValues array_values_type) {
    fbb_.AddElement<uint8_t>(SyncVar::VT_ARRAY_VALUES_TYPE, static_cast<uint8_t>(array_values_type), 0);
  }
  void add_array_values(::flatbuffers::Offset<void> array_values) {
    fbb_.AddOffset(SyncVar::VT_ARRAY_VALUES, array_values);
  }
  explicit SyncVarBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SyncVar> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SyncVar>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SyncVar> CreateSyncVar(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> category = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    uint32_t array_size = 0,
    uint32_t array_start = 0,
    DynamiteMessage::ArrayValues array_values_type = DynamiteMessage::ArrayValues_NONE,
    ::flatbuffers::Offset<void> array_values = 0) {
  SyncVarBuilder builder_(_fbb);
  builder_.add_array_values(array_values);
  builder_.add_array_start(array_start);
  builder_.add_array_size(array_size);
  builder_.add_name(name);
  builder_.add_category(category);
  builder_.add_array_values_type(array_values_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SyncVar> CreateSyncVarDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *category = nullptr,
    const char *name = nullptr,
    uint32_t array_size = 0,
    uint32_t array_start = 0,
    DynamiteMessage::ArrayValues array_values_type = DynamiteMessage::ArrayValues_NONE,
    ::flatbuffers::Offset<void> array_values = 0) {
  auto category__ = category ? _fbb.CreateString(category) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return DynamiteMessage::CreateSyncVar(
      _fbb,
      category__,
      name__,
      array_size,
      array_start,
      array_values_type,
      array_values);
}

struct MessageWrapper FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageWrapperBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_NUM = 4,
    VT_MSG_TYPE = 6,
    VT_MSG = 8
  };
  uint32_t packet_num() const {
    return GetField<uint32_t>(VT_PACKET_NUM, 0);
  }
  DynamiteMessage::Message msg_type() const {
    return static_cast<DynamiteMessage::Message>(GetField<uint8_t>(VT_MSG_TYPE, 0));
  }
  const void *msg() const {
    return GetPointer<const void *>(VT_MSG);
  }
  template<typename T> const T *msg_as() const;
  const DynamiteMessage::Ping *msg_as_Ping() const {
    return msg_type() == DynamiteMessage::Message_Ping ? static_cast<const DynamiteMessage::Ping *>(msg()) : nullptr;
  }
  const DynamiteMessage::AddFixedUserMarker *msg_as_AddFixedUserMarker() const {
    return msg_type() == DynamiteMessage::Message_AddFixedUserMarker ? static_cast<const DynamiteMessage::AddFixedUserMarker *>(msg()) : nullptr;
  }
  const DynamiteMessage::AddFollowUserMarker *msg_as_AddFollowUserMarker() const {
    return msg_type() == DynamiteMessage::Message_AddFollowUserMarker ? static_cast<const DynamiteMessage::AddFollowUserMarker *>(msg()) : nullptr;
  }
  const DynamiteMessage::RemoveUserMarker *msg_as_RemoveUserMarker() const {
    return msg_type() == DynamiteMessage::Message_RemoveUserMarker ? static_cast<const DynamiteMessage::RemoveUserMarker *>(msg()) : nullptr;
  }
  const DynamiteMessage::SetSightMarker *msg_as_SetSightMarker() const {
    return msg_type() == DynamiteMessage::Message_SetSightMarker ? static_cast<const DynamiteMessage::SetSightMarker *>(msg()) : nullptr;
  }
  const DynamiteMessage::SyncVar *msg_as_SyncVar() const {
    return msg_type() == DynamiteMessage::Message_SyncVar ? static_cast<const DynamiteMessage::SyncVar *>(msg()) : nullptr;
  }
  const DynamiteMessage::RequestVar *msg_as_RequestVar() const {
    return msg_type() == DynamiteMessage::Message_RequestVar ? static_cast<const DynamiteMessage::RequestVar *>(msg()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PACKET_NUM, 4) &&
           VerifyField<uint8_t>(verifier, VT_MSG_TYPE, 1) &&
           VerifyOffset(verifier, VT_MSG) &&
           VerifyMessage(verifier, msg(), msg_type()) &&
           verifier.EndTable();
  }
};

template<> inline const DynamiteMessage::Ping *MessageWrapper::msg_as<DynamiteMessage::Ping>() const {
  return msg_as_Ping();
}

template<> inline const DynamiteMessage::AddFixedUserMarker *MessageWrapper::msg_as<DynamiteMessage::AddFixedUserMarker>() const {
  return msg_as_AddFixedUserMarker();
}

template<> inline const DynamiteMessage::AddFollowUserMarker *MessageWrapper::msg_as<DynamiteMessage::AddFollowUserMarker>() const {
  return msg_as_AddFollowUserMarker();
}

template<> inline const DynamiteMessage::RemoveUserMarker *MessageWrapper::msg_as<DynamiteMessage::RemoveUserMarker>() const {
  return msg_as_RemoveUserMarker();
}

template<> inline const DynamiteMessage::SetSightMarker *MessageWrapper::msg_as<DynamiteMessage::SetSightMarker>() const {
  return msg_as_SetSightMarker();
}

template<> inline const DynamiteMessage::SyncVar *MessageWrapper::msg_as<DynamiteMessage::SyncVar>() const {
  return msg_as_SyncVar();
}

template<> inline const DynamiteMessage::RequestVar *MessageWrapper::msg_as<DynamiteMessage::RequestVar>() const {
  return msg_as_RequestVar();
}

struct MessageWrapperBuilder {
  typedef MessageWrapper Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_packet_num(uint32_t packet_num) {
    fbb_.AddElement<uint32_t>(MessageWrapper::VT_PACKET_NUM, packet_num, 0);
  }
  void add_msg_type(DynamiteMessage::Message msg_type) {
    fbb_.AddElement<uint8_t>(MessageWrapper::VT_MSG_TYPE, static_cast<uint8_t>(msg_type), 0);
  }
  void add_msg(::flatbuffers::Offset<void> msg) {
    fbb_.AddOffset(MessageWrapper::VT_MSG, msg);
  }
  explicit MessageWrapperBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MessageWrapper> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MessageWrapper>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MessageWrapper> CreateMessageWrapper(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t packet_num = 0,
    DynamiteMessage::Message msg_type = DynamiteMessage::Message_NONE,
    ::flatbuffers::Offset<void> msg = 0) {
  MessageWrapperBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_packet_num(packet_num);
  builder_.add_msg_type(msg_type);
  return builder_.Finish();
}

inline bool VerifyMessage(::flatbuffers::Verifier &verifier, const void *obj, Message type) {
  switch (type) {
    case Message_NONE: {
      return true;
    }
    case Message_Ping: {
      auto ptr = reinterpret_cast<const DynamiteMessage::Ping *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Message_AddFixedUserMarker: {
      auto ptr = reinterpret_cast<const DynamiteMessage::AddFixedUserMarker *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Message_AddFollowUserMarker: {
      auto ptr = reinterpret_cast<const DynamiteMessage::AddFollowUserMarker *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Message_RemoveUserMarker: {
      auto ptr = reinterpret_cast<const DynamiteMessage::RemoveUserMarker *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Message_SetSightMarker: {
      auto ptr = reinterpret_cast<const DynamiteMessage::SetSightMarker *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Message_SyncVar: {
      auto ptr = reinterpret_cast<const DynamiteMessage::SyncVar *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Message_RequestVar: {
      auto ptr = reinterpret_cast<const DynamiteMessage::RequestVar *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessage(
        verifier,  values->Get(i), types->GetEnum<Message>(i))) {
      return false;
    }
  }
  return true;
}

inline bool VerifyArrayValues(::flatbuffers::Verifier &verifier, const void *obj, ArrayValues type) {
  switch (type) {
    case ArrayValues_NONE: {
      return true;
    }
    case ArrayValues_Bool: {
      auto ptr = reinterpret_cast<const DynamiteMessage::Bool *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArrayValues_Int32: {
      auto ptr = reinterpret_cast<const DynamiteMessage::Int32 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArrayValues_Uint32: {
      auto ptr = reinterpret_cast<const DynamiteMessage::Uint32 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArrayValues_Float: {
      auto ptr = reinterpret_cast<const DynamiteMessage::Float *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArrayValues_Int8: {
      auto ptr = reinterpret_cast<const DynamiteMessage::Int8 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArrayValues_Uint8: {
      auto ptr = reinterpret_cast<const DynamiteMessage::Uint8 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArrayValues_Int16: {
      auto ptr = reinterpret_cast<const DynamiteMessage::Int16 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ArrayValues_Uint16: {
      auto ptr = reinterpret_cast<const DynamiteMessage::Uint16 *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyArrayValuesVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyArrayValues(
        verifier,  values->Get(i), types->GetEnum<ArrayValues>(i))) {
      return false;
    }
  }
  return true;
}

inline const DynamiteMessage::MessageWrapper *GetMessageWrapper(const void *buf) {
  return ::flatbuffers::GetRoot<DynamiteMessage::MessageWrapper>(buf);
}

inline const DynamiteMessage::MessageWrapper *GetSizePrefixedMessageWrapper(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DynamiteMessage::MessageWrapper>(buf);
}

inline bool VerifyMessageWrapperBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DynamiteMessage::MessageWrapper>(nullptr);
}

inline bool VerifySizePrefixedMessageWrapperBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DynamiteMessage::MessageWrapper>(nullptr);
}

inline void FinishMessageWrapperBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DynamiteMessage::MessageWrapper> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageWrapperBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DynamiteMessage::MessageWrapper> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DynamiteMessage

#endif  // FLATBUFFERS_GENERATED_DYNAMITESYNCSCHEMA_DYNAMITEMESSAGE_H_
