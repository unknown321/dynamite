// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DYNAMITESYNCSCHEMA_DYNAMITEMESSAGE_H_
#define FLATBUFFERS_GENERATED_DYNAMITESYNCSCHEMA_DYNAMITEMESSAGE_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 9 &&
              FLATBUFFERS_VERSION_REVISION == 23,
             "Non-compatible flatbuffers version included");

namespace DynamiteMessage {

struct Vec3;

struct AddFixedUserMarker;
struct AddFixedUserMarkerBuilder;

struct AddFollowUserMarker;
struct AddFollowUserMarkerBuilder;

struct RemoveUserMarker;
struct RemoveUserMarkerBuilder;

struct SetSightMarker;
struct SetSightMarkerBuilder;

struct SyncVar;
struct SyncVarBuilder;

struct MessageWrapper;
struct MessageWrapperBuilder;

enum Message : uint8_t {
  Message_NONE = 0,
  Message_AddFixedUserMarker = 1,
  Message_AddFollowUserMarker = 2,
  Message_RemoveUserMarker = 3,
  Message_SetSightMarker = 4,
  Message_SyncVar = 5,
  Message_MIN = Message_NONE,
  Message_MAX = Message_SyncVar
};

inline const Message (&EnumValuesMessage())[6] {
  static const Message values[] = {
    Message_NONE,
    Message_AddFixedUserMarker,
    Message_AddFollowUserMarker,
    Message_RemoveUserMarker,
    Message_SetSightMarker,
    Message_SyncVar
  };
  return values;
}

inline const char * const *EnumNamesMessage() {
  static const char * const names[7] = {
    "NONE",
    "AddFixedUserMarker",
    "AddFollowUserMarker",
    "RemoveUserMarker",
    "SetSightMarker",
    "SyncVar",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessage(Message e) {
  if (::flatbuffers::IsOutRange(e, Message_NONE, Message_SyncVar)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessage()[index];
}

template<typename T> struct MessageTraits {
  static const Message enum_value = Message_NONE;
};

template<> struct MessageTraits<DynamiteMessage::AddFixedUserMarker> {
  static const Message enum_value = Message_AddFixedUserMarker;
};

template<> struct MessageTraits<DynamiteMessage::AddFollowUserMarker> {
  static const Message enum_value = Message_AddFollowUserMarker;
};

template<> struct MessageTraits<DynamiteMessage::RemoveUserMarker> {
  static const Message enum_value = Message_RemoveUserMarker;
};

template<> struct MessageTraits<DynamiteMessage::SetSightMarker> {
  static const Message enum_value = Message_SetSightMarker;
};

template<> struct MessageTraits<DynamiteMessage::SyncVar> {
  static const Message enum_value = Message_SyncVar;
};

bool VerifyMessage(::flatbuffers::Verifier &verifier, const void *obj, Message type);
bool VerifyMessageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct AddFixedUserMarker FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AddFixedUserMarkerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4
  };
  const DynamiteMessage::Vec3 *pos() const {
    return GetStruct<const DynamiteMessage::Vec3 *>(VT_POS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<DynamiteMessage::Vec3>(verifier, VT_POS, 4) &&
           verifier.EndTable();
  }
};

struct AddFixedUserMarkerBuilder {
  typedef AddFixedUserMarker Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(const DynamiteMessage::Vec3 *pos) {
    fbb_.AddStruct(AddFixedUserMarker::VT_POS, pos);
  }
  explicit AddFixedUserMarkerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AddFixedUserMarker> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AddFixedUserMarker>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AddFixedUserMarker> CreateAddFixedUserMarker(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const DynamiteMessage::Vec3 *pos = nullptr) {
  AddFixedUserMarkerBuilder builder_(_fbb);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct AddFollowUserMarker FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AddFollowUserMarkerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_OBJECT_ID = 6
  };
  const DynamiteMessage::Vec3 *pos() const {
    return GetStruct<const DynamiteMessage::Vec3 *>(VT_POS);
  }
  uint32_t object_id() const {
    return GetField<uint32_t>(VT_OBJECT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<DynamiteMessage::Vec3>(verifier, VT_POS, 4) &&
           VerifyField<uint32_t>(verifier, VT_OBJECT_ID, 4) &&
           verifier.EndTable();
  }
};

struct AddFollowUserMarkerBuilder {
  typedef AddFollowUserMarker Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pos(const DynamiteMessage::Vec3 *pos) {
    fbb_.AddStruct(AddFollowUserMarker::VT_POS, pos);
  }
  void add_object_id(uint32_t object_id) {
    fbb_.AddElement<uint32_t>(AddFollowUserMarker::VT_OBJECT_ID, object_id, 0);
  }
  explicit AddFollowUserMarkerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AddFollowUserMarker> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AddFollowUserMarker>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AddFollowUserMarker> CreateAddFollowUserMarker(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const DynamiteMessage::Vec3 *pos = nullptr,
    uint32_t object_id = 0) {
  AddFollowUserMarkerBuilder builder_(_fbb);
  builder_.add_object_id(object_id);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct RemoveUserMarker FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RemoveUserMarkerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MARKER_ID = 4
  };
  uint32_t marker_id() const {
    return GetField<uint32_t>(VT_MARKER_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_MARKER_ID, 4) &&
           verifier.EndTable();
  }
};

struct RemoveUserMarkerBuilder {
  typedef RemoveUserMarker Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_marker_id(uint32_t marker_id) {
    fbb_.AddElement<uint32_t>(RemoveUserMarker::VT_MARKER_ID, marker_id, 0);
  }
  explicit RemoveUserMarkerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RemoveUserMarker> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RemoveUserMarker>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RemoveUserMarker> CreateRemoveUserMarker(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t marker_id = 0) {
  RemoveUserMarkerBuilder builder_(_fbb);
  builder_.add_marker_id(marker_id);
  return builder_.Finish();
}

struct SetSightMarker FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SetSightMarkerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECT_ID = 4,
    VT_DURATION = 6
  };
  uint32_t object_id() const {
    return GetField<uint32_t>(VT_OBJECT_ID, 0);
  }
  uint32_t duration() const {
    return GetField<uint32_t>(VT_DURATION, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_OBJECT_ID, 4) &&
           VerifyField<uint32_t>(verifier, VT_DURATION, 4) &&
           verifier.EndTable();
  }
};

struct SetSightMarkerBuilder {
  typedef SetSightMarker Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_object_id(uint32_t object_id) {
    fbb_.AddElement<uint32_t>(SetSightMarker::VT_OBJECT_ID, object_id, 0);
  }
  void add_duration(uint32_t duration) {
    fbb_.AddElement<uint32_t>(SetSightMarker::VT_DURATION, duration, 0);
  }
  explicit SetSightMarkerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SetSightMarker> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SetSightMarker>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SetSightMarker> CreateSetSightMarker(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t object_id = 0,
    uint32_t duration = 0) {
  SetSightMarkerBuilder builder_(_fbb);
  builder_.add_duration(duration);
  builder_.add_object_id(object_id);
  return builder_.Finish();
}

struct SyncVar FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SyncVarBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT = 4
  };
  const ::flatbuffers::String *text() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct SyncVarBuilder {
  typedef SyncVar Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_text(::flatbuffers::Offset<::flatbuffers::String> text) {
    fbb_.AddOffset(SyncVar::VT_TEXT, text);
  }
  explicit SyncVarBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SyncVar> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SyncVar>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SyncVar> CreateSyncVar(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> text = 0) {
  SyncVarBuilder builder_(_fbb);
  builder_.add_text(text);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SyncVar> CreateSyncVarDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return DynamiteMessage::CreateSyncVar(
      _fbb,
      text__);
}

struct MessageWrapper FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageWrapperBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSG_TYPE = 4,
    VT_MSG = 6
  };
  DynamiteMessage::Message msg_type() const {
    return static_cast<DynamiteMessage::Message>(GetField<uint8_t>(VT_MSG_TYPE, 0));
  }
  const void *msg() const {
    return GetPointer<const void *>(VT_MSG);
  }
  template<typename T> const T *msg_as() const;
  const DynamiteMessage::AddFixedUserMarker *msg_as_AddFixedUserMarker() const {
    return msg_type() == DynamiteMessage::Message_AddFixedUserMarker ? static_cast<const DynamiteMessage::AddFixedUserMarker *>(msg()) : nullptr;
  }
  const DynamiteMessage::AddFollowUserMarker *msg_as_AddFollowUserMarker() const {
    return msg_type() == DynamiteMessage::Message_AddFollowUserMarker ? static_cast<const DynamiteMessage::AddFollowUserMarker *>(msg()) : nullptr;
  }
  const DynamiteMessage::RemoveUserMarker *msg_as_RemoveUserMarker() const {
    return msg_type() == DynamiteMessage::Message_RemoveUserMarker ? static_cast<const DynamiteMessage::RemoveUserMarker *>(msg()) : nullptr;
  }
  const DynamiteMessage::SetSightMarker *msg_as_SetSightMarker() const {
    return msg_type() == DynamiteMessage::Message_SetSightMarker ? static_cast<const DynamiteMessage::SetSightMarker *>(msg()) : nullptr;
  }
  const DynamiteMessage::SyncVar *msg_as_SyncVar() const {
    return msg_type() == DynamiteMessage::Message_SyncVar ? static_cast<const DynamiteMessage::SyncVar *>(msg()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MSG_TYPE, 1) &&
           VerifyOffset(verifier, VT_MSG) &&
           VerifyMessage(verifier, msg(), msg_type()) &&
           verifier.EndTable();
  }
};

template<> inline const DynamiteMessage::AddFixedUserMarker *MessageWrapper::msg_as<DynamiteMessage::AddFixedUserMarker>() const {
  return msg_as_AddFixedUserMarker();
}

template<> inline const DynamiteMessage::AddFollowUserMarker *MessageWrapper::msg_as<DynamiteMessage::AddFollowUserMarker>() const {
  return msg_as_AddFollowUserMarker();
}

template<> inline const DynamiteMessage::RemoveUserMarker *MessageWrapper::msg_as<DynamiteMessage::RemoveUserMarker>() const {
  return msg_as_RemoveUserMarker();
}

template<> inline const DynamiteMessage::SetSightMarker *MessageWrapper::msg_as<DynamiteMessage::SetSightMarker>() const {
  return msg_as_SetSightMarker();
}

template<> inline const DynamiteMessage::SyncVar *MessageWrapper::msg_as<DynamiteMessage::SyncVar>() const {
  return msg_as_SyncVar();
}

struct MessageWrapperBuilder {
  typedef MessageWrapper Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_msg_type(DynamiteMessage::Message msg_type) {
    fbb_.AddElement<uint8_t>(MessageWrapper::VT_MSG_TYPE, static_cast<uint8_t>(msg_type), 0);
  }
  void add_msg(::flatbuffers::Offset<void> msg) {
    fbb_.AddOffset(MessageWrapper::VT_MSG, msg);
  }
  explicit MessageWrapperBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MessageWrapper> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MessageWrapper>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MessageWrapper> CreateMessageWrapper(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    DynamiteMessage::Message msg_type = DynamiteMessage::Message_NONE,
    ::flatbuffers::Offset<void> msg = 0) {
  MessageWrapperBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_msg_type(msg_type);
  return builder_.Finish();
}

inline bool VerifyMessage(::flatbuffers::Verifier &verifier, const void *obj, Message type) {
  switch (type) {
    case Message_NONE: {
      return true;
    }
    case Message_AddFixedUserMarker: {
      auto ptr = reinterpret_cast<const DynamiteMessage::AddFixedUserMarker *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Message_AddFollowUserMarker: {
      auto ptr = reinterpret_cast<const DynamiteMessage::AddFollowUserMarker *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Message_RemoveUserMarker: {
      auto ptr = reinterpret_cast<const DynamiteMessage::RemoveUserMarker *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Message_SetSightMarker: {
      auto ptr = reinterpret_cast<const DynamiteMessage::SetSightMarker *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Message_SyncVar: {
      auto ptr = reinterpret_cast<const DynamiteMessage::SyncVar *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessage(
        verifier,  values->Get(i), types->GetEnum<Message>(i))) {
      return false;
    }
  }
  return true;
}

inline const DynamiteMessage::MessageWrapper *GetMessageWrapper(const void *buf) {
  return ::flatbuffers::GetRoot<DynamiteMessage::MessageWrapper>(buf);
}

inline const DynamiteMessage::MessageWrapper *GetSizePrefixedMessageWrapper(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DynamiteMessage::MessageWrapper>(buf);
}

inline bool VerifyMessageWrapperBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DynamiteMessage::MessageWrapper>(nullptr);
}

inline bool VerifySizePrefixedMessageWrapperBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DynamiteMessage::MessageWrapper>(nullptr);
}

inline void FinishMessageWrapperBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DynamiteMessage::MessageWrapper> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageWrapperBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DynamiteMessage::MessageWrapper> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace DynamiteMessage

#endif  // FLATBUFFERS_GENERATED_DYNAMITESYNCSCHEMA_DYNAMITEMESSAGE_H_
