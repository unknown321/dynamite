#ifndef HOOK_DYNAMITE_MGSVTPP_ADDRESSES
#define HOOK_DYNAMITE_MGSVTPP_ADDRESSES

#include <map>
#include <string>

// do _not_ hook lua_newstate, it will crash no matter what if compiled with mingw

namespace Dynamite {
    std::map<std::string, uint64_t> mgsvtpp_adresses_1_0_15_3_en{
        {"IsDefenseTeamByOnlineFobLocal", 0x14d9ba3b0},
        {"IsOffenseTeamByOnlineFobLocal", 0x141e02e40},
        {"CreateHostSession", 0x1459f3e20},
        {"NetworkSystemCreateHostSession", 0x14da33790},
        {"CreateClientSession", 0x1459f3910},
        {"SetSteamId", 0x14c404640},
        {"FobTargetCtor", 0x1459ed160},
        {"SessionConnectInfoCtor", 0x1459edf00},
        {"NetInfoCreateSession", 0x14da5c070},
        {"IsConnectReady", 0x1459d0cc0},
        {"UpdateClientEstablished", 0x140316610},
        {"SessionImpl2IsHost", 0x143e64400},
        {"GetFobOffensePlayerInstanceIndex", 0x14d9b00e0},
        {"GetFobDefensePlayerInstanceIndex", 0x14d9afbc0},
        {"CommandPost2ImplGetAvailableMemberCount", 0x1472a0500},
        {"CommandPost2ImplGetMaxCpCount", 0x140c93de0},
        {"GetUiMarkerTypeFromSystemType2", 0x140934580},
        {"SightManagerImplSetMarker", 0x149c687d0},
        {"SteamUdpSocketImplOnP2PSessionRequest", 0x14c4040c0},
        {"MessageBufferAddMessage", 0x1435ce000},
        {"AddLocalDamage", 0x141192af0},
        {"DamageControllerImplInitialize", 0x14991a290},
        {"SynchronizerImplGetDamage", 0x149cb4c70},
        {"Marker2SystemImpl", 0x144fdb110},
        {"Marker2SystemImplPlacedUserMarkerFixed", 0x144fe5400},
        {"GetLocalPlayerID", 0x144c972c0},
        {"RemoveUserMarker", 0x1460706a0},
        {"EquipHudSystemImplInitData", 0x14606c570},
        {"Marker2SystemImplRemovedUserMarker", 0x144fe6a80},
        {"Marker2SystemImplPlacedUserMarkerFollow", 0x144fe5920},
        {"Marker2SystemImplRemovedAllUserMarker", 0x1405c52f0},
        {"SightManagerImplInitialize", 0x149c63e20},
        {"UiControllerImplSetNoUseEquipId", 0x1496b3b50},
        {"EquipCrossEvCallIsItemNoUse", 0x145d0b630},

        {"HashMapFindKey", 0x142ed7be0},
        {"GetQuarkSystemTable", 0x140bff3f0},
        {"FoxStrHash32", 0x14c1bd730},
        {"FoxFindEntity", 0x14312acb0},
        {"FoxGetEntityHandle", 0x14321e540},
        {"FoxGetEntityProperty", 0x1400c4e80},
        {"FoxCreatePropertyInfo", 0x1400926a0},
        {"ValueGetAsUInt32", 0x140065480},
        {"FoxString", 0x142eaf970},
        {"FindGameObjectWithID", 0x146c95580},
        {"Soldier2ImplGetInterface", 0x149f2f3d0},
        {"PlayerInfoServiceGetPositionAtIndex", 0x14d9b7770},
        {"GetMainSession", 0x143e60970},
        {"GetSessionMemberCount", 0x143e60ef0},
        {"CloseSession", 0x146457b20},
        {"Player2GameObjectImplWarp", 0x14627c6f0},
        {"ScriptDeclVarsImplSetVarValue", 0x140ae2090},
        {"SoldierRouteAiImplPreUpdate", 0x141572270},
        {"RouteGroupImplGetEventId", 0x144b8d070},
        {"AiControllerImplAddNode", 0x140c0f230},
        {"AiControllerImplSleepNode", 0x146d1bf60},
        {"AiControllerImplWakeNode", 0x146d1c6c0},
        {"CoreAiImplGetVehicleId", 0x149170560},
        {"CoreAiImplGetVehicleRideState", 0x14a0a2ab0},
        {"CoreAiImplIsVehicleRetain", 0x14a0a3f30},
        {"SoldierImplRouteAiImplCheckVehicleAndWalkerGearGetInAndOutStep", 0x14156d590},
        {"StatusControllerImplIsSet", 0x144cba8d0},
        {"ScriptDeclVarsImplGetVarHandleWithVarIndex", 0x140ae17c0},
        {"GmGetScriptVarInfo", 0x1461f02b0},
        {"BandWidthManagerImplCalcAverageRttOfBetterHalfConnection", 0x1407e0580},
        {"BandWidthManagerImplCalcAverageLostRateOfBetterHalfConnection", 0x1407e0370},
        {"BandWidthManagerImplStartLimitState", 0x1459bf210},

        {"BlockHeapAlloc", 0x143264660},
        {"BlockHeapFree", 0x1432651b0},
        {"FoxBlockProcess", 0x14006df80},
        {"FoxBlockUnload", 0x143154a00},
        {"FoxBlockReload", 0x1431533b0},
        {"FoxBlockActivate", 0x14006cb20},
        {"FoxBlockDeactivate", 0x14314a000},
        {"FoxGenerateUniqueName", 0x1400e0210},
        {"FoxBlock", 0x143145960},
        {"FoxBlockLoad", 0x143151e80},
        {"BlockMemoryAllocTail", 0x1400dbb30},
        {"BlockMemoryAllocHeap", 0x143261bf0},
        {"GetCurrentBlockMemory", 0x14328e410},
        {"FoxCreateQuark", 0x146c6a650},

        {"FoxLuaPushVector3", 0x143257590},
        {"FoxLuaPushQuat", 0x143256e30},
        {"l_AnnounceLogView", 0x145d5ded0},

        {"lua_pushinteger", 0x14c1e6ef0},
        {"lua_pushstring", 0x14c1e7ee0},
        {"lua_pushboolean", 0x14c1db230},
        {"lua_getfield", 0x14c1d7320},
        {"lua_setfield", 0x14c1eabb0},
        {"lua_pcall", 0x14c1daff0},
        {"luaI_openlib", 0x14c201610},
        {"luaL_checkinteger", 0x14c1ff430},
        {"luaL_openlibs", 0x14c1fd0c0},
        {"luaL_checknumber", 0x14c1ffb30},
        {"lua_toboolean", 0x14c1ebe40},
        {"lua_createtable", 0x14c1d6320},
        {"lua_pushvalue", 0x14c1e87e0},
        {"lua_remove", 0x14c1ea0c0},

        /*
                        {"StrCode64", 0x14c1bd730},
                        {"PathCode64", 0x14c1bd5d0},//tex TODO need to verify naming and purpose. technically this is PathFileNameExt64, but given that PathCode
        - without ext is likely less used than PathCode would have been a better name for PathFileNameExt64
                        {"FNVHash32", 0x143f33a20},
                        {"GetFreeRoamLangId", 0x145e60f40},
                        {"UpdateFOVLerp", 0x141116800},//tex: TODO: verify the return AL>RAX
                        {"UnkPrintFuncStubbedOut", 0x142ef2bf0},//tex: Some info printing function that has been stubbed out
                        {"l_StubbedOut", 0x14024a8e0},//tex: another retail stubb out to wrangle
                        {"nullsub_2", 0x1409c8f90},//tex: another retail stubb out to wrangle
                        {"LoadFileSub", 0x142f784a0},
                        {"LoadFile", 0x14319ea20},
                        {"LoadFile_01", 0x14319d620},
                        {"LoadFile_02", 0x14319eb70},
                        {"LoadFile_03", 0x1431a0130},
                        {"LoadFile_05", 0x14319ee10},
                        {"LoadPlayerPartsFpk", 0x146866c80},
                        {"LoadPlayerPartsParts", 0x146865f80},
                        {"LoadPlayerCamoFpk", 0x146864180},
                        {"LoadPlayerCamoFv2", 0x146863f80},
                        {"LoadPlayerFacialMotionFpk", 0x1468656c0},
                        {"LoadPlayerFacialMotionMtar", 0x146865370},
                        {"LoadPlayerBionicArmFpk", 0x140ae90f0},
                        {"LoadPlayerBionicArmFv2", 0x140ae9040},
                        {"CheckPlayerPartsIfShouldApplySkinToneFv2", 0x140ae9400},
                        {"LoadPlayerPartsSkinToneFv2", 0x140ae8560},
                        {"IsHeadNeededForPartsType", 0x140ae84b0},
                        {"IsHeadNeededForPartsTypeAndAvatar", 0x140ae8500},
                        {"LoadPlayerSnakeFaceFpk", 0x140ae8df0},
                        {"LoadPlayerSnakeFaceFv2", 0x140ae8ce0},
                        {"LoadAvatarOgreHornFpk", 0x14685dd50},
                        {"LoadAvatarOgreHornFv2", 0x14685da20},
                        {"LoadBuddyMainFile", 0x140a461d0},
                        {"LoadBuddyQuietWeaponFpk", 0x1464d5dc0},
                        {"LoadBuddyWalkerGearArmFpk", 0x1464d3fc0},
                        {"LoadBuddyWalkerGearHeadFpk", 0x1464d44a0},
                        {"LoadBuddyWalkerGearWeaponFpk", 0x1464d47f0},
                        {"LoadDefaultFpksFunc", 0x143151e80},
                        {"PreparePlayerVehicleInSortie", 0x146a95640},
                        {"PreparePlayerVehicleInGame", 0x146a95380},
                        {"LoadDefaultFpkPtrFunc", 0x14314bda0},
                        {"LoadAllVehicleCamoFpks", 0x145006860},
                        {"CreateInPlace", 0x142e8a5d0},
                        {"lua_newstate", 0x14c1fc960},//tex could use default implementation, but may want to hook if we want to see what the engine is up to
                        {"lua_close", 0x14c1fc380},
                        {"lua_newthread", 0x14c1d9d90},
                        {"lua_atpanic", 0x14c1d5120},
                        //{"lua_gettop", USING_CODE},
                        {"lua_settop", 0x14c1ebbe0},
                        {"lua_insert", 0x14c1d8150},
                        {"lua_replace", 0x14c1ea370},
                        {"lua_checkstack", 0x14c1d5900},
                        {"lua_xmove", 0x14c1edcd0},
                        {"lua_isnumber", 0x14c1d8c90},
                        {"lua_isstring", 0x14c1d9250},
                        {"lua_iscfunction", 0x141a11650},
                        //{"lua_isuserdata", USING_CODE},//tex: No calls in lua distro, so may be hard to find, or have been culled by compilation
                        {"lua_type", 0x14c1ed760},
                        //{"lua_typename", USING_CODE},
                        //{"lua_equal", NOT_FOUND},//tex: lua implementation goes a bit deeper than I'm happy with to use at the moment. No calls in lua distro,
         so may be hard to find, or have been culled by compilation
                        {"lua_rawequal", 0x14c1e8d70},
                        {"lua_lessthan", 0x14c1d9890},
                        {"lua_tonumber", 0x14c1ecdd0},
                        {"lua_tointeger", 0x14c1ec760},
                        {"lua_toboolean", 0x14c1ebe40},
                        {"lua_tolstring", 0x14c1eca70},
                        {"lua_objlen", 0x14c1da960},
                        {"lua_tocfunction", 0x14c1ec560},
                        {"lua_touserdata", 0x14c1ed4b0},
                        {"lua_tothread", 0x14c1ed3c0},
                        {"lua_topointer", 0x14c1ed230},
                        {"lua_pushnil", 0x14c1e7cc0},
                        {"lua_pushnumber", 0x14c1e7dd0},
                        {"lua_pushlstring", 0x14c1e7310},
                        {"lua_pushvfstring", 0x14c1e8b10},
                        {"lua_pushfstring", 0x14c1e6a70},
                        {"lua_pushcclosure", 0x14c1e67b0},
                        {"lua_pushlightuserdata", 0x14c1e71b0},
                        {"lua_pushthread", 0x14c1e86a0},
                        {"lua_gettable", 0x14c1d7c10},
                        {"lua_rawget", 0x14c1e9190},
                        {"lua_rawgeti", 0x14c1e9320},//via MACRO lua_getref
                        {"lua_newuserdata", 0x14c1d9f80},
                        {"lua_getmetatable", 0x14c1d79b0},
                        {"lua_getfenv", 0x14c1d7160},
                        {"lua_settable", 0x14c1eb2b0},
                        {"lua_rawset", 0x14c1e9cf0},
                        {"lua_rawseti", 0x14c1e9ff0},
                        {"lua_setmetatable", 0x14c1eb040},
                        {"lua_setfenv", 0x14c1eaa00},
                        {"lua_call", 0x14c1d5690},
                        {"lua_cpcall", 0x146c7dd00},
                        {"lua_load", 0x14c1d99c0},
                        {"lua_dump", 0x14c1d6690},
                        //{"lua_yield", USING_CODE},//tex: DEBUGNOW uses lua_lock, may not be a good idea due to thread issues and not knowing what the engine
         is doing to the state. Seems to be inlined in luaB_yield (it's only call in lua distro)
                        {"lua_resume", 0x14c1f0d80},
                        //{"lua_status", USING_CODE},//tex DEBUGNOW hmm, address range. ida finds this as sig though, but the prior functions have entries in
        .pdata which put them in the same range (0x14cdb)
                        {"lua_gc", 0x141a11220},
                        {"lua_error", 0x14c1d6c90},
                        {"lua_next", 0x14c1da770},
                        {"lua_concat", 0x14c1d5d50},
                        //{"lua_getallocf", NO_USE},//tex don't really want to mess with allocator function anyway, DEBUGNOW no calls in lua distro, so may be
         hard to find, or have been culled by compilation
                        //{"lua_setallocf", NO_USE},//tex don't really want to mess with allocator function anyway
                        //{"lua_setlevel", NO_USE},//tex: labeled by lua as a hack to be removed in lua 5.2
                        {"lua_getstack", 0x14c20fbd0},
                        {"lua_getinfo", 0x14c20f650},
                        {"lua_getlocal", 0x14c20f880},
                        {"lua_setlocal", 0x14c20fff0},
                        {"lua_getupvalue", 0x14c1d7ea0},
                        {"lua_setupvalue", 0x141a12240},
                        {"lua_sethook", 0x14c20fde0},
                        //{"lua_gethook", USING_CODE},
                        //{"lua_gethookmask", USING_CODE},
                        //{"lua_gethookcount", USING_CODE},
                        //{"luaL_register", USING_CODE},
                        {"luaL_getmetafield", 0x14c200d50},
                        {"luaL_callmeta", 0x14c1fec20},
                        {"luaL_typerror", 0x141a184c0},
                        {"luaL_argerror", 0x14c1fe5f0},
                        {"luaL_checklstring", 0x14c1ff790},
                        {"luaL_optlstring", 0x14c201de0},
                        //{"luaL_optnumber", USING_CODE},//tex: Only use in os_difftime, but decompilation is giving a bunch more params than it usually takes
                        {"luaL_optinteger", 0x14c201a70},
                        {"luaL_checkstack", 0x14c200010},
                        {"luaL_checktype", 0x14c2004c0},
                        {"luaL_checkany", 0x14c1ff2f0},
                        {"luaL_newmetatable", 0x14c2013c0},
                        {"luaL_checkudata", 0x14c200630},
                        {"luaL_where", 0x14c203350},
                        {"luaL_error", 0x14c2008f0},
                        {"luaL_checkoption", 0x14c1ffd60},
                        //{"luaL_ref", USING_CODE},//tex: Unsure on this address. No uses in lua dist, found a function that looks much like it, but it was
         undefined, and has a errant param
                        //{"luaL_unref", USING_CODE},
                        {"luaL_loadfile", 0x141a17b90},
                        {"luaL_loadbuffer", 0x14c200f90},
                        //{"luaL_loadstring", USING_CODE},
                        {"luaL_newstate", 0x14c201490},
                        {"luaL_gsub", 0x141a17710},
                        {"luaL_findtable", 0x14c200aa0},
                        //{"luaL_buffinit", USING_CODE},
                        {"luaL_prepbuffer", 0x14c202140},
                        {"luaL_addlstring", 0x141a16e70},
                        //{"luaL_addstring", USING_CODE},//tex: Only call is in luaL_gsub, seems to have been optimized out as the function just wraps
        luaL_addlstring
                        {"luaL_addvalue", 0x14c1fd9b0},
                        {"luaL_pushresult", 0x14c202280},
                        {"luaopen_base", 0x14c21d5c0},
                        {"luaopen_table", 0x14c21d8d0},
                        {"luaopen_io", 0x14c21da00},
                        {"luaopen_os", 0x14c21e020},
                        {"luaopen_string", 0x14c21e720},
                        {"luaopen_math", 0x14c21e800},
                        {"luaopen_debug", 0x14c21ea00},
                        {"luaopen_package", 0x14c21ee20},
                        */
    };
}

#endif